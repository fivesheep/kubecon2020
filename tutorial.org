#+TITLE: NATS Streams and Services: From Zero to Hero

* Checkout the repo

Follow along with this repo: https://github.com/nats-io/kubecon2020

#+begin_src sh
git clone https://github.com/nats-io/kubecon2020
#+end_src

* Setup decentralized auth

** Installing NSC

#+begin_src
curl -LO https://raw.githubusercontent.com/nats-io/nsc/master/install.sh
less install.sh
sh ./install.sh
#+end_src

** Initialize NSC

#+begin_src sh
curl -fSl https://nats-io.github.io/k8s/setup/nsc-setup.sh | sh
source .nsc.env
#+end_src

** Inspect NSC objects

#+begin_src sh
tree nsc/ | less
nsc describe jwt -f nsc/accounts/nats/KO/KO.jwt
#+end_src

** Creating the accounts

- We will separate the system into two accounts:
  + An ADMIN account for management of users (create/revoke)
  + An CHAT account for the users to interact with each other.

- We need 3 users at least:
  + Admin User          :: Credentials Provisioner and revocation
  + Chat User           :: Dynamically generated
  + Bootstrap User      :: Chat Credentials Requestor

#+begin_src sh
nsc add account --name CHAT
nsc add account --name ADMIN
nsc list accounts
nsc describe jwt -f ./nsc/accounts/nats/KO/accounts/CHAT/CHAT.jwt
nsc describe jwt -f ./nsc/accounts/nats/KO/accounts/ADMIN/ADMIN.jwt
#+end_src

** Add a new signing key for CHAT and ADMIN accounts

This is needed to be able to create users dynamically by the credentials provisioner.

#+begin_src sh
$ nsc generate nkey --account CHAT --store
ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH
account key stored /Users/wallyqs/repos/nats-dev/src/github.com/nats-io/kubecon2020/nsc/nkeys/keys/A/DC/ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH.nk

#
# This signing key will be used to create users
#
$ nsc edit account -n CHAT --sk ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH
[ OK ] added signing key "ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH"
[ OK ] edited account "CHAT"

$ nsc generate nkey --account ADMIN --store
AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN
account key stored /Users/wallyqs/repos/nats-dev/src/github.com/nats-io/kubecon2020/nsc/nkeys/keys/A/AE/AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN.nk

$ nsc edit account -n ADMIN --sk AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN
[ OK ] added signing key "AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN"
[ OK ] edited account "ADMIN"

$ nsc describe jwt -f ./nsc/accounts/nats/KO/accounts/CHAT/CHAT.jwt | grep Signing
│ Signing Keys              │ ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH │

$ nsc describe jwt -f ./nsc/accounts/nats/KO/accounts/ADMIN/ADMIN.jwt | grep Signing
│ Signing Keys              │ AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN │
#+end_src

** Create user for the credentials provisioner

This is in the ADMIN account, a user that is able to provision credentials.

#+begin_src
$ nsc add user -a ADMIN chat-access \
   -K $NKEYS_PATH/keys/A/AE/AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN.nk \
   --allow-sub 'chat.req.access' \
   --allow-sub 'chat.KUBECON.online' \
   --allow-pubsub 'chat.req.provisioned' \
   --allow-pubsub 'chat.req.provisioned.updates' \
   --allow-pubsub 'chat.req.revoke' \
   --allow-pubsub '_INBOX.>' \
   --allow-pubsub '_R_.>' \
   --allow-pub-response
[ OK ] generated and stored user key "UALGE5RGSDC3DC4DWIO2KU6Y2R35F6UWKD4GGDBL3TTMXROPKKAPRZBQ"
[ OK ] generated user creds file `~/repos/nats-dev/src/github.com/nats-io/kubecon2020/nsc/nkeys/creds/KO/ADMIN/chat-access.creds`
[ OK ] added user "chat-access" to account "ADMIN"

$ nsc describe jwt -f $NKEYS_PATH/creds/KO/ADMIN/chat-access.creds
#+end_src

** Create user for the credentials request

This is a bootstrapping user shared by everyone, like a guest user.

#+begin_src
$ nsc add user -a ADMIN chat-creds-request \
   -K $NKEYS_PATH/keys/A/AE/AAEYWYQI7LICX2ZRIGVDKJYEAV7V3YK6BEDVDOBOVSGBJT3NB24QMIYN.nk \
   --allow-pubsub '_INBOX.>' \
   --allow-pubsub '_R_.>' \
   --allow-pub 'chat.req.access'

$ nsc describe jwt -f $NKEYS_PATH/creds/KO/ADMIN/chat-creds-request.creds
#+end_src

** Add the export and import

#+begin_src
nsc add export -a ADMIN --service -n chat-access  -s chat.req.access
nsc add export -a CHAT  -n chat-online  -s chat.KUBECON.online

nsc add import -a CHAT  --service --src-account $(nsc list accounts 2>&1 | grep ADMIN | awk '{print $4}') -n chat-access --remote-subject chat.req.access   -s chat.req.access
nsc add import -a ADMIN -n chat-online \
    --src-account $(nsc list accounts 2>&1 | grep CHAT | awk '{print $4}') \
    --remote-subject chat.KUBECON.online
#+end_src

** Setting up the NATS Server locally

Generate the NATS configuration.

#+begin_src sh :results output
source .nsc.env
nsc list accounts
mkdir conf jwt
nsc generate config --sys-account SYS --nats-resolver > conf/resolver.conf
cat conf/resolver.conf
#+end_src

Start the NATS Server:

#+begin_src sh
nats-server -c conf/resolver.conf
#+end_src

Upload the accounts:

#+begin_src sh
nats-req -creds $NKEYS_PATH/creds/KO/SYS/sys.creds "\$SYS.REQ.ACCOUNT.$(nsc list accounts 2>&1 | grep CHAT  | awk '{print $4}').CLAIMS.UPDATE" $(cat ./nsc/accounts/nats/KO/accounts/CHAT/CHAT.jwt)

# FIXME: workaround to prevent colors matching in the line below.
rm ./nsc/accounts/nsc.json

nats-req -creds $NKEYS_PATH/creds/KO/SYS/sys.creds "\$SYS.REQ.ACCOUNT.$(nsc list accounts 2>&1 | grep ADMIN | awk '{print $4}').CLAIMS.UPDATE" $(cat ./nsc/accounts/nats/KO/accounts/ADMIN/ADMIN.jwt)
#+end_src

** Smoke test

Create a mock admin responder:

#+begin_src sh
nats-rply -creds $NKEYS_PATH/creds/KO/ADMIN/chat-access.creds chat.req.access example
#+end_src

Try to make a request:

#+begin_src sh
nats-req -creds $NKEYS_PATH/creds/KO/ADMIN/chat-creds-request.creds chat.req.access example
#+end_src

* Using the Chat Application

** Running the provisioner

Run the provisioner with the public JWT of the CHAT account and the signing key
to create users under the CHAT account.

#+begin_src
go run main.go --acc $NSC_HOME/nats/KO/accounts/CHAT/CHAT.jwt \
    --sk $NKEYS_PATH/keys/A/DC/ADCQ6MQXSOSLMFIW7J6EDLJO2NCQIH4C44YR3MOWS6QLQYQFDV2UXBHH.nk \
    --creds $NKEYS_PATH/creds/KO/ADMIN/chat-access.creds
    --osk $NKEYS_PATH/keys/O/AQ/OAQFB4CLUH2SZR7HOQAV6E7G4INPW36S7YBB5KLUZ3ABLWPWJ4FTRRTA.nk \
    --syscreds $NKEYS_PATH/creds/KO/SYS/sys.creds
#+end_src

** Getting some credentials

#+begin_src
nats-req -creds nsc/nkeys/creds/KO/ADMIN/chat-creds-request.creds chat.req.access wallyqs 2> my.creds
#+end_src

** Starting the Chat app

#+begin_src sh
cd ./chat
go build
./chat --creds ../my.creds
#+end_src

** Revoking a user

To revoke:

#+begin_src sh
nsc revocations add_user -a ADMIN -u UCQYJLDPMVWHETFPF3ZT5DKCVAKGPX33KEZC6DZUHL3DB3VBYNJATOQQ
nats-req -creds $NKEYS_PATH/creds/KO/SYS/sys.creds "\$SYS.REQ.ACCOUNT.$(nsc list accounts 2>&1 | grep ADMIN   | awk '{print $4}').CLAIMS.UPDATE" $(cat $NSC_HOME/nats/KO/accounts/ADMIN/ADMIN.jwt)
#+end_src

* Deploying to K8S: Infra setup

** Creating K8S clusters for NATS

You can find info here:

https://docs.nats.io/nats-on-kubernetes/super-cluster-on-digital-ocean

Let's create 2 clusters in Digital Ocean:

#+begin_src sh
doctl kubernetes cluster create nats-k8s-sfo2 --count 3 --region sfo2
doctl kubernetes cluster create nats-k8s-ams3 --count 3 --region ams3
#+end_src

** Open up the firewall for the required ports

- 4222 is the client port
- 7422 is the port for leafnodes
- 7522 is the port for gateway connections (cluster of clusters)
- 443 is the websocket port

#+begin_src sh
for firewall in `doctl compute firewall list | tail -n 3 | awk '{print $1}'`; do
  doctl compute firewall add-rules $firewall --inbound-rules protocol:tcp,ports:4222,address:0.0.0.0/0
  doctl compute firewall add-rules $firewall --inbound-rules protocol:tcp,ports:7422,address:0.0.0.0/0
  doctl compute firewall add-rules $firewall --inbound-rules protocol:tcp,ports:7522,address:0.0.0.0/0
done
#+end_src

* Deploying NATS to a K8S Cluster

** Add Helm NATS repos

#+begin_src
brew install helm
helm repo add nats https://nats-io.github.io/k8s/helm/charts/
helm repo update
#+end_src

** Upload the NATS Accounts bootstrap file

#+begin_src sh
for ctx in do-ams3-nats-k8s-ams3 do-sfo2-nats-k8s-sfo2; do
  kubectl --context $ctx create cm nats-accounts --from-file conf/resolver.conf
done
#+end_src

** COMMENT Configure gateway connections

Using explicit URL endpoints though we could use external-dns instead for this:

#+begin_src sh :results output
for ctx in do-sfo2-nats-k8s-sfo2 do-ams3-nats-k8s-ams3; do
  echo "    - name: $ctx"
  echo "      urls:"
  for externalIP in `kubectl --context $ctx get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'`; do
    echo "        - nats://$externalIP:7522";
  done
  echo
done
#+end_src

** COMMENT Super Cluster YAML

#+begin_src yaml :tangle conf/super-cluster.yaml
nats:
  image: synadia/nats-server:nightly

  # Bind a host port from the host for each one of the pods.
  externalAccess: true

  logging:
    debug: false
    trace: false

cluster:
  enabled: true

auth:
  enabled: true

  resolver:
    ############################
    #                          #
    # Memory resolver settings #
    #                          #
    ##############################
    type: memory

    #
    # Use a configmap reference which will be mounted
    # into the container.
    #
    configMap:
      name: nats-accounts
      key: resolver.conf

gateway:
  enabled: true

  # NOTE: defined via --set gateway.name="$ctx"
  # name: $ctx

  gateways:
    - name: do-ams3-nats-k8s-ams3
      urls:
        - nats://164.90.192.194:7522
        - nats://164.90.192.226:7522
        - nats://164.90.192.80:7522

    - name: do-sgp1-nats-k8s-sgp1
      urls:
        - nats://188.166.236.158:7522
        - nats://188.166.232.25:7522
        - nats://188.166.236.155:7522

    - name: do-sfo2-nats-k8s-sfo2
      urls:
        - nats://64.227.50.254:7522
        - nats://64.227.54.26:7522
        - nats://138.197.219.203:7522

natsbox:
  enabled: true
#+end_src

#+begin_src sh
for ctx in do-ams3-nats-k8s-ams3  do-sfo2-nats-k8s-sfo2 do-sgp1-nats-k8s-sgp1; do
  helm --kube-context $ctx install nats nats/nats -f conf/super-cluster.yaml --set gateway.name=$ctx
  # helm --kube-context $ctx delete nats
done
#+end_src

** COMMENT Confirm the setup

- Peek at the connect_urls and confirm that the routes are present.

#+begin_src
telnet 188.166.232.25 4222
#+end_src

Try to make a request from SF:

#+begin_src
nats-req -s 138.197.219.203 -creds nsc/nkeys/creds/KO/KUBECON/chat-creds-request.creds chat.req.access example
#+end_src

Create a mock responder in AMS:

#+begin_src sh
nats-rply -s 164.90.192.226 -creds nsc/nkeys/creds/KO/KUBECON/chat-access.creds chat.req.access example
#+end_src

** Now upload the accounts

Upload the accounts:

#+begin_src sh
nats-req -s tls://sfo.nats.chat:4222 -creds $NKEYS_PATH/creds/KO/SYS/sys.creds "\$SYS.REQ.ACCOUNT.$(nsc list accounts 2>&1 | grep CHAT  | awk '{print $4}').CLAIMS.UPDATE" $(cat ./nsc/accounts/nats/KO/accounts/CHAT/CHAT.jwt)

# FIXME: workaround to prevent colors matching in the line below.
rm ./nsc/accounts/nsc.json

nats-req -s tls://sfo.nats.chat:4222 -creds $NKEYS_PATH/creds/KO/SYS/sys.creds "\$SYS.REQ.ACCOUNT.$(nsc list accounts 2>&1 | grep ADMIN | awk '{print $4}').CLAIMS.UPDATE" $(cat ./nsc/accounts/nats/KO/accounts/ADMIN/ADMIN.jwt)
#+end_src
** 

* COMMENT Using the System account

#+begin_src sh
nats-sub -s 188.166.236.158 -creds ./nsc/nkeys/creds/KO/SYS/sys.creds '>'
#+end_src
* Setting up external access for the NATS cluster

** Deploying external-dns

First deploy the external-dns component using the DigitalOcean provider:

#+BEGIN_SRC sh
echo '
rbac:
  create: true

provider: digitalocean

digitalocean:
  apiToken: himitsu

interval: "1m"

policy: sync # or upsert-only
' > k8s/external-dns.yaml

helm repo add bitnami https://charts.bitnami.com/bitnami
helm install external-dns bitnami/external-dns -f k8s/external-dns.yaml
#+END_SRC

** Create NodePort service to create A records for each server

This =NodePort= is required in order to be able to expose the host ports.

#+BEGIN_SRC yaml
apiVersion: v1
kind: Service
metadata:
  name: nats-nodeport
  labels:
    app: nats
  annotations:
    external-dns.alpha.kubernetes.io/hostname: sfo.nats.chat
spec:
  type: NodePort
  selector:
    app: nats
  externalTrafficPolicy: Local
  ports:
  - name: client
    port: 4222
    nodePort: 30222
    targetPort: 4222
  - name: websocket
    port: 443
    nodePort: 30223
    targetPort: 443
#+END_SRC

This will make it possible to reach out to the NATS cluster by using the =sfo.nats.chat= domain:

#+BEGIN_SRC 
nslookup sfo.nats.chat
Server:		2001:558:feed::1
Address:	2001:558:feed::1#53

Non-authoritative answer:
Name:	sfo.nats.chat
Address: 165.232.63.15
Name:	sfo.nats.chat
Address: 165.232.63.98
Name:	sfo.nats.chat
Address: 143.110.128.15
#+END_SRC

